// 📦 Imports
@import "../../../styles/utils.scss";

// 🉐 Variables

// The text displayed as code content
$contents: ("Hi, my name is Sebastian" "Thank you for visiting my Portfolio");

// Time for 1 Character to be typing
$durationCharFwd: 0.06;
// Delay beetween typed and deleted mode
$durationFullGab: 0.6;
// Time for 1 Character to be deleted
$durationCharBwd: 0.02;
// Delay beetween one sentence and another
$durationDoneGap: 1;

// Count of characters in $contents
$charCount: 0;
// The total duration of the animation
$totDuration: 0;

/**
  - Loop through each string in $contents
  - Set $charCount (strings.length)
  - Calculate totalduration 
    - string.length * (duration typed + duration deleted) + delay typed/deleted + delay beetween strings
**/
@each $content in $contents {
  $charCount: $charCount + str-length($content);
  $totDuration: $totDuration +
    (str-length($content) * ($durationCharFwd + $durationCharBwd)) +
    $durationFullGab +
    $durationDoneGap;
}

@function percent($content, $letter, $modifier) {
  $stringsPast: $content - 1;
  $time: 0;

  @while $stringsPast > 0 {
    $time: $time +
      (
        ($durationCharFwd + $durationCharBwd) *
          (str-length(nth($contents, $stringsPast)))
      ) +
      $durationFullGab +
      $durationDoneGap;
    $stringsPast: $stringsPast - 1;
  }

  @if $letter <= str-length(nth($contents, $content)) {
    $time: $time + ($durationCharFwd * ($letter - 1));
  } @else {
    $time: $time +
      ($durationCharFwd * str-length(nth($contents, $content))) +
      $durationFullGab +
      ($durationCharBwd * ($letter - str-length(nth($contents, $content))));
  }

  @return ($time / $totDuration * 100 + $modifier) + "%";
}

// ✨ Animations
/**
  - keyframe used to display the typed code
**/
@keyframes typed {
  // Iterate through strings array
  @for $i from 1 through length($contents) {
    // Iterate through letters (i guess two times)
    @for $j from 1 through (str-length(nth($contents, $i)) * 2) {
      @if $j < str-length(nth($contents, $i)) * 2 {
        #{percent($i, $j, 0)},
        #{percent($i, $j+1, -0.001)} {
          @if $j <= str-length(nth($contents, $i)) {
            content: quote(#{str_slice(nth($contents, $i), 1, $j)});
          } @else {
            content: quote(
              #{str_slice(
                  nth($contents, $i),
                  1,
                  str-length(nth($contents, $i)) -
                    ($j - str-length(nth($contents, $i)))
                )}
            );
          }
        }
      } @else {
        @if $i < length($contents) {
          #{percent($i, $j, 0)},
          #{percent($i+1, 1, -0.001)} {
            content: " ​"; //zero-width space to retain element height
          }
        } @else {
          #{percent($i, $j, 0)},
          100% {
            content: " ";
          }
        }
      }
    }
  }
}

/**
  - keyframe used to let the content blink
**/
@keyframes blink {
  75% {
    border-color: transparent;
  }
}

div.code-typing {
  height: inherit;
  color: $pc-code-text-color;
  font-family: "VT323", monospace, sans-serif;
  font-size: 2.2rem;
  display: flex;
  flex-direction: column;
  flex-grow: 1;
  align-items: center;
  justify-content: center;
  align-items: center;

  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;

  animation: typed #{$totDuration + "s"} linear 1.2s, blink 1s infinite;

  &::after {
    content: " ";
    display: inline-block;
    position: relative;
    top: toRem(-13);
    @media (max-width: 575px) {
      top: toRem(-33); //Cheat for adjusting rectangle before animation starts
    }
    white-space: nowrap;
    padding-right: toRem(3);
    border-right: calc(1.1vw + toRem(4)) solid rgba($pc-code-text-color, 0.75);
    text-shadow: 0 0 toRem(5) $pc-code-effect-color-rgba;
    animation: typed #{$totDuration + "s"} linear 1.2s, blink 1s infinite;
  }
}
